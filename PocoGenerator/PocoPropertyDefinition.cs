using PocoGenerator.ValueGenerators.Literals;
using PocoGenerator.ValueGenerators.Compound;
using System;

namespace PocoGenerator
{
    /// <summary>
    /// A class returned by PocoGenerator .For(..), used to support DSL.
    /// </summary>
    /// <typeparam name="TPropertyType">The type of the property which will be assigned a generator.</typeparam>
    /// <typeparam name="TParent">The type of object generated by the parent generator.</typeparam>
    public class PocoPropertyDefinition<TPropertyType, TParent> where TParent : new()
    {
        private PocoGenerator<TParent> parentGenerator;
        private String propertyName;

        /// <summary>
        /// Creates a new instance.
        /// </summary>
        /// <param name="parent">The parent generator.</param>
        /// <param name="propertyName">The name of the property which will be assigned a generator.</param>
        public PocoPropertyDefinition (PocoGenerator<TParent> parent, String propertyName) {
            this.parentGenerator = parent;
            this.propertyName = propertyName;
        }

        /// <summary>
        /// Adds an IValueGenerator which the parent generator will use for generating values for the selected property.
        /// </summary>
        /// <param name="valueGenerator">The generator to be used.</param>
        /// <returns>The parent generatro.</returns>
        public PocoGenerator<TParent> Use (IValueGenerator<TPropertyType> valueGenerator) {
            parentGenerator.AddPropertyDefinition(propertyName, valueGenerator);
            return parentGenerator;
        }

        /// <summary>
        /// Adds a function which the parent generator will use for generating values for the selected property.
        /// </summary>
        /// <param name="valueFunction">The function to be used.</param>
        /// <returns>The parent generatro.</returns>
        public PocoGenerator<TParent> Use(Func<TParent, TPropertyType> valueFunction) {
            parentGenerator.AddPropertyDefinition(propertyName, new FunctionValueGenerator<TParent, TPropertyType>(valueFunction));
            return parentGenerator;
        }

        /// <summary>
        /// Adds a value which the parent generator will use for generating values for the selected property.
        /// </summary>
        /// <param name="literal">The value to be used.</param>
        /// <returns>The parent generatro.</returns>
        public PocoGenerator<TParent> Use (TPropertyType literal) {
            IValueGenerator<TPropertyType> valueGenerator = new LiteralValueGenerator<TPropertyType>(literal);
            parentGenerator.AddPropertyDefinition(propertyName, valueGenerator);
            return parentGenerator;
        }


    }
}
